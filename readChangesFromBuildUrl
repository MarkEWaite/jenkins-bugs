#!/bin/bash

# Read the changes URL for this job
#
# Default Jenkins URL from JENKINS_URL environment variable
# Default git repo URL from current repository

usage() { echo "Usage: $0 [-b build_url] [-s jenkins_server_url] [-u git_repo_url] [-n]" 1>&2; exit 1; }

failed_with_crumb() { echo Failed with crumb; exit 2; }

failed_without_crumb() { echo Failed without crumb; exit 3; }

SERVER=
GIT_URL=
NEED_CRUMB=true

while getopts ":s:u:n" o; do
    case "${o}" in
        b)
            BUILD_URL=${OPTARG}
            ;;
        s)
            SERVER=${OPTARG}
            ;;
        u)
            GIT_URL=${OPTARG}
            ;;
        n)
            NEED_CRUMB=false
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

# Assure URL of Jenkins server is set

if [ -z "$SERVER" ]; then
    SERVER=$JENKINS_URL
fi
if [ -z "$SERVER" ]; then
    usage
fi
# remove trailing slash from SERVER, fails CSRF exclusion check
SERVER=${SERVER%/}

# Assure URL of git repository is set

if [ -n "$GIT_URL" ]; then
    echo Using GIT_URL: $GIT_URL
else
    GIT_URL=$(git remote -v | grep fetch | awk '/origin/{print $2}')
    if [ -n "$GIT_URL" ]; then
        echo Using GIT_URL from fetch remote: $GIT_URL
    else
        GIT_URL=$(git remote -v | awk 'NR==1{print $2}')
        if [ -n "$GIT_URL" ]; then
            echo Using GIT_URL from first remote: $GIT_URL
        else
            GIT_URL=https://github.com/MarkEWaite/jenkins-bugs
            echo Using default GIT_URL: $GIT_URL
        fi
    fi
fi
if [ -z "$GIT_URL" ]; then
    usage
fi

# Assure BUILD_URL is set

if [ -z "$BUILD_URL" ]; then
    usage
fi

# CHANGES_URL is the URL to the changes in $BUILD_URL

CHANGES_URL=${BUILD_URL}/changes

cookie_file=$(mktemp /tmp/reportScanLogResults-script.XXXXXX)

if [ "$NEED_CRUMB" == "true" ]; then
    crumb=$(curl --cookie-jar $cookie_file -s $SERVER/crumbIssuer/api/xml?xpath=concat\(//crumbRequestField,%22:%22,//crumb\))
    if [ -z "$crumb" ]; then
        echo Exiting: No crumb returned by $SERVER
        exit 4
    fi
    if [[ $crumb =~ 'HTTP ERROR 404' ]]; then
        NEED_CRUMB=false
    else
        if [[ $crumb =~ '<html>' ]]; then
            echo Exiting: html instead of crumb returned by $SERVER: $crumb
            exit 5
        fi
        if [ ${#crumb} -gt 150 ]; then
            echo Long crumb returned by $SERVER: $crumb
            exit 6
        fi
    fi
fi

prefix=$RANDOM

# Read changes html page

if [ "$NEED_CRUMB" == "true" ]; then
    crumb_output=${prefix}-crumbfull
    echo "Reading changes from URL=$CHANGES_URL using crumb: $crumb"
    curl --cookie $cookie_file -s -H "$crumb" -X POST $CHANGES_URL -o $crumb_output
    rm $cookie_file
    echo Crumb output file is $crumb_output
    ls -altr $crumb_output
    # echo Crumb output content is:
    # cat $crumb_output
    grep -q '<li>User interface truncates change messages.*</li>' $crumb_output || failed_with_crumb
    grep '<li>User interface truncates change messages.*</li>' $crumb_output | sed 's,.*\(<li>User interface truncates change messages.*</li>\).*,\1,g'
else
    no_crumb_output=${prefix}-crumbless
    echo "Reading changes from URL=$CHANGES_URL with no crumb"
    curl -s -X POST $CHANGES_URL -o $no_crumb_output
    grep -q '<li>User interface truncates change messages.*</li>' $no_crumb_output | sed 's,.*\(<li>User interface truncates change messages.*</li>\).*,\1,g'
fi

exit 0
