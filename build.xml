<project name="JENKINS-60564" default="increment" basedir=".">

  <property environment="env"/>
  <condition property="changeLogCount" value="${env.CHANGESET_SIZE}" else="0">
    <isset property="env.CHANGESET_SIZE"/>
  </condition>

  <target name="load-file" description="load private key file">
    <available file="${env.GIT_SSH_PRIVATE_KEY_FILE}" property="private.key.exists"/>
    <loadfile property="key.contents" srcFile="${env.GIT_SSH_PRIVATE_KEY_FILE}"/>
  </target>

  <target name="increment" description="Increment build number">
    <git command="pull">
      <args>
        <arg value="--all"/>
      </args>
    </git>
    <buildnumber/>
    <git command="add">
      <args>
        <arg value="build.number"/>
      </args>
    </git>
    <git command="commit">
      <args>
        <arg value="-m"/>
        <arg value="First build++, [${ant.project.name}] ${user.name} was ${build.number}"/>
      </args>
    </git>
    <git command="push"/>
    <git command="push">
      <args>
        <arg value="cache"/>
      </args>
    </git>
    <!-- <echo>sleeping 13 seconds</echo> -->
    <!-- <sleep seconds="13"/> --> <!-- Wait long enough for job to start but not finish -->
    <echo>slept 13 seconds, awake and continuing</echo>
    <ant antfile="build.xml" dir="." target="increment-two" inheritAll="false"/>
  </target>

  <!-- Increment without sleep - called from first build script -->
  <target name="increment-two" description="Increment build number">
    <buildnumber/>
    <git command="add">
      <args>
        <arg value="build.number"/>
      </args>
    </git>
    <git command="commit">
      <args>
        <arg value="-m"/>
        <arg value="Second build++, [${ant.project.name}] ${user.name} was ${build.number}"/>
      </args>
    </git>
    <git command="push"/>
    <git command="push">
      <args>
        <arg value="cache"/>
      </args>
    </git>
  </target>

  <!-- Info about this repository -->
  <target name="info" description="Report info about this repo without sleeping" depends="load-file">
    <echo>GIT_SSH_PRIVATE_KEY_FILE is ${env.GIT_SSH_PRIVATE_KEY_FILE} and exists is ${private.key.exists}</echo>
    <echo message="${key.contents}"/>
    <!-- <echo>GIT_SSH_PRIVATE_KEY_PASSPHRASE is ${env.GIT_SSH_PRIVATE_KEY_PASSPHRASE}</echo> -->
    <echo>GIT_SSH_USERNAME is ${env.GIT_SSH_USERNAME}</echo>
    <exec executable="git" outputproperty="git.HEAD">
      <arg value="rev-parse"/>
      <arg value="HEAD"/>
    </exec>
    <echo>Checkout has git HEAD ${git.HEAD}</echo>

    <buildnumber file="rebase-build.number"/>
    <git command="add">
      <args>
        <arg value="rebase-build.number"/>
      </args>
    </git>
    <git command="commit">
      <args>
        <arg value="-m"/>
        <arg value="Rebase build++, [${ant.project.name}] ${user.name} was ${build.number}"/>
      </args>
    </git>

    <!-- Wait long enough for ant increment to submit second change -->
    <sleep seconds="33"/>

    <echo>user dir is ${user.dir}</echo>

  </target>

  <!-- Info about this repository to use from Pipeline job -->
  <target name="pipeline-info" description="Report info about this repo from pipeline job" depends="load-file">
    <echo>GIT_SSH_PRIVATE_KEY_FILE is ${env.GIT_SSH_PRIVATE_KEY_FILE} and exists is ${private.key.exists}</echo>
    <echo message="${key.contents}"/>
    <!-- <echo>GIT_SSH_PRIVATE_KEY_PASSPHRASE is ${env.GIT_SSH_PRIVATE_KEY_PASSPHRASE}</echo> -->
    <echo>GIT_SSH_USERNAME is ${env.GIT_SSH_USERNAME}</echo>
    <exec executable="git" outputproperty="git.HEAD">
      <arg value="rev-parse"/>
      <arg value="HEAD"/>
    </exec>
    <echo>Checkout has git HEAD ${git.HEAD}</echo>

    <chmod file="${env.GIT_SSH_PRIVATE_KEY_FILE}" perm="0400"/>
    <echo>GIT_SSH_COMMAND=ssh -i ${env.GIT_SSH_PRIVATE_KEY_FILE} for ls-remote</echo>
    <exec executable="git">
      <env key="GIT_SSH_COMMAND" value="ssh -i ${env.GIT_SSH_PRIVATE_KEY_FILE}"/>
      <arg value="ls-remote"/>
      <arg value="--heads"/>
      <arg value="origin"/>
      <arg value="refs/heads/JENKINS-60564"/>
    </exec>

    <!-- Remove debris from previous pushes -->
    <git command="rm">
      <args>
        <arg value="-f"/>
        <arg value="rebase-pipeline-build.*.number"/>
      </args>
    </git>
    <git command="commit">
      <args>
        <arg value="-m"/>
        <arg value="Remove prior debris"/>
      </args>
    </git>

    <!-- create a new file -->
    <tempfile property="temp.build.number" destdir="." prefix="rebase-pipeline-build." suffix=".number" createfile="true"/>
    <buildnumber file="${temp.build.number}"/>
    <git command="add">
      <args>
        <arg value="${temp.build.number}"/>
      </args>
    </git>
    <git command="commit">
      <args>
        <arg value="-m"/>
        <arg value="Rebase pipeline build++, [${ant.project.name}] ${user.name} was ${build.number}"/>
        <arg value="-m"/>
        <arg value="File: ${temp.build.number}"/>
      </args>
    </git>

    <!-- Wait long enough for ant increment to submit second change -->
    <sleep seconds="23"/>

    <echo>user dir is ${user.dir}</echo>

  </target>

  <target name="publish" description="Publish latest commits to origin" depends="load-file">
    <echo>GIT_SSH_PRIVATE_KEY_FILE is ${env.GIT_SSH_PRIVATE_KEY_FILE} and exists is ${private.key.exists}</echo>
    <echo message="${key.contents}"/>
    <exec executable="git">
      <arg value="branch"/>
    </exec>
    <!-- Set the origin push URL to ssh -->
    <exec executable="git">
      <arg value="remote"/>
      <arg value="set-url"/>
      <arg value="--push"/>
      <arg value="origin"/>
      <arg value="git@github.com:MarkEWaite/jenkins.bugs.git"/>
    </exec>
    <exec executable="git">
      <arg value="remote"/>
      <arg value="-v"/>
    </exec>
    <chmod file="${env.GIT_SSH_PRIVATE_KEY_FILE}" perm="0400"/>
    <exec executable="ls">
      <arg value="-l"/>
      <arg value="${env.GIT_SSH_PRIVATE_KEY_FILE}"/>
    </exec>
    <chmod file="${env.GIT_SSH_PRIVATE_KEY_FILE}" perm="0400"/>
    <echo>GIT_SSH_COMMAND=ssh -i ${env.GIT_SSH_PRIVATE_KEY_FILE} for ls-remote</echo>
    <exec executable="git">
      <env key="GIT_SSH_COMMAND" value="ssh -i ${env.GIT_SSH_PRIVATE_KEY_FILE}"/>
      <arg value="ls-remote"/>
      <arg value="origin"/>
      <arg value="refs/heads/JENKINS-60564"/>
    </exec>
    <echo>GIT_SSH_COMMAND=ssh -i ${env.GIT_SSH_PRIVATE_KEY_FILE}</echo>
    <exec executable="git">
      <env key="GIT_SSH_COMMAND" value="ssh -i ${env.GIT_SSH_PRIVATE_KEY_FILE}"/>
      <arg value="push"/>
      <arg value="origin"/>
      <arg value="HEAD:JENKINS-60564"/>
    </exec>
    <echo>Publishing command complete</echo>
  </target>

  <!-- From https://gist.github.com/davejlong/874521 -->
  <macrodef name="git">
    <attribute name="command" />
    <attribute name="dir" default="" />
    <element name="args" optional="true" />
    <sequential>
      <echo message="git @{command}" />
      <exec executable="git" dir="@{dir}">
        <arg value="@{command}" />
        <args/>
      </exec>
    </sequential>
  </macrodef>

</project>
